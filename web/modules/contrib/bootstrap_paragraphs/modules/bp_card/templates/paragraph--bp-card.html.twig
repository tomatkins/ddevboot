{#
/**
 * @file
 * Template for displaying Bootstrap Paragraphs Card Bundle.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{{ attach_library('bp_card/bp-card') }}
{# Renders Card Style field. #}
{# Sets class name from values in database. #}
{% if paragraph.bp_card_style is not empty %}
  {% set card_style = content.bp_card_style['#items'].getString() %}
  {% set card_style_classes = [
    'card--large-top' == card_style ? 'card--large-top',
    'card--small-left' == card_style ? 'card--small-left',
  ]
  %}
{% endif %}

{# The template default set classes. #}
{%
set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
'card',
content.bp_margin[0]['#markup'] ? content.bp_margin[0]['#markup'],
content.bp_padding[0]['#markup'] ? content.bp_padding[0]['#markup'],
]
%}
{# Merges Card Style field with classes. #}
{% if paragraph.bp_card_style is not empty %}
  {% set classes = classes|merge(card_style_classes) %}
{% endif %}
{# Sets Unique ID for Card from Paragraph ID. #}
{% set paragraph_id = 'card-' ~ paragraph.id.value %}


{# If 'Card with Large Top Image' is chosen as the 'Card Style'. #}
{% if card_style == 'card--large-top'%}

  {# Prints Card template. #}
  <div{{ attributes.addClass(classes).setAttribute('id', paragraph_id) }}>
    {% if paragraph.bp_card_image is not empty %}
      <div class="card-image card-img-top">
        {{ content.bp_card_image }}
      </div>
    {% endif %}
    <div class="card-body">
      {% if paragraph.bp_card_title is not empty %}
        <h2 class="card-title">{{ content.bp_card_title }}</h2>
      {% endif %}
      {% if paragraph.bp_card_text is not empty %}
        <div class="card-text">{{ content.bp_card_text }}</div>
      {% endif %}
      {{ content|without('bp_card_image', 'bp_card_link', 'bp_card_style', 'bp_card_text', 'bp_card_title', 'bp_link_entire_card', 'bp_card_button_style', 'bp_margin', 'bp_padding') }}
    </div>
    {# Pulls out the Card Link if it exists and renders the URL in this link. #}
    {% if paragraph.bp_card_link is not empty %}
      <div class="card-footer">
        <a href="{{ content.bp_card_link[0]['#url'] }}" class="card-link{% if content.bp_link_entire_card[0]['#markup'] == 'On' %} stretched-link{% endif %}{% if content.bp_card_button_style is not empty %} {{ content.bp_card_button_style[0]['#markup'] }}{% endif %}">
          {% if content.bp_card_link[0]['#url'] %}{{ content.bp_card_link[0]['#title'] }}{% endif %}
        </a>
      </div>
    {% endif %}
  </div>
{% endif %}

{# If 'Card with Small Left Image' is chosen as the 'Card Style'. #}
{% if card_style == 'card--small-left'%}

  <div{{ attributes.addClass(classes).setAttribute('id', paragraph_id) }}>
    <div class="row g-0">
        {% if paragraph.bp_card_image is not empty %}
        <div class="col-md-4">
          <div class="card-image img-fluid">
            {{ content.bp_card_image }}
          </div>
        </div>
      {% endif %}
      <div class="col-md-8">
        <div class="card-body">
          {% if paragraph.bp_card_title is not empty %}
            <h2 class="card-title">{{ content.bp_card_title }}</h2>
          {% endif %}
          {% if paragraph.bp_card_text is not empty %}
            <div class="card-text">{{ content.bp_card_text }}</div>
          {% endif %}
          {{ content|without('bp_card_image', 'bp_card_link', 'bp_card_style', 'bp_card_text', 'bp_card_title', 'bp_link_entire_card', 'bp_card_button_style', 'bp_margin', 'bp_padding') }}
        </div>
        {# Pulls out the Card Link if it exists and renders the URL in this link. #}
        {% if paragraph.bp_card_link is not empty %}
          <div class="card-footer">
            <a href="{{ content.bp_card_link[0]['#url'] }}" class="card-link{% if content.bp_link_entire_card[0]['#markup'] == 'On' %} stretched-link{% endif %}{% if content.bp_card_button_style is not empty %} {{ content.bp_card_button_style[0]['#markup'] }}{% endif %}">
              {% if content.bp_card_link[0]['#url'] %}{{ content.bp_card_link[0]['#title'] }}{% endif %}
            </a>
          </div>
        {% endif %}
      </div>
    </div>
  </div>
{% endif %}
