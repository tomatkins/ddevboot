<?php

/**
 * @file
 * Bootstrap Paragraphs module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_theme().
 */
function bootstrap_paragraphs_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__default' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__bp_accordion' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__bp_carousel' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__bp_tabs' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__bp_columns' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__bp_columns_three_uneven' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__bp_columns_two_uneven' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__bp_image' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__bp_modal' => [
      'base hook' => 'paragraph',
    ],
    'field__entity_reference_revisions' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__bp_column_content' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__bp_column_content_2' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__bp_column_content_3' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__bp_image__image' => [
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function bootstrap_paragraphs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.bootstrap_paragraphs':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_preprocess_paragraph().
 */
function bootstrap_paragraphs_preprocess_paragraph(&$variables) {
  $paragraph_values = $variables['paragraph'];
  // Replaces background color.
  if ($paragraph_values->hasField('bp_background') && !$paragraph_values->get('bp_background')->isEmpty()) {
    $variables['bs']['background_color'] = str_replace('paragraph--color paragraph--color--', 'bg-', $paragraph_values->get('bp_background')->getString());
  }
}
